generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(cuid())
  name      String        @db.VarChar(200)
  email     String        @unique(map: "email") @db.VarChar(200)
  status    UserStatus    @default(CREATED)
  role      Role          @default(SELLER)
  password  String?
  companyId String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  company   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  profile   UserProfile?
  settings  UserSettings?
  logs      Log[]

  @@index([status])
  @@index([role])
  @@index([companyId])
  @@map("users")
}

model UserProfile {
  id            String         @id @default(cuid())
  userId        String         @unique
  document      String?        @db.VarChar(14)
  username      String?
  documentType  DocumentType?
  maritalStatus MaritalStatus?
  phone         String?        @db.VarChar(50)
  profession    String?
  nationality   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserSettings {
  id                  String                  @id @default(cuid())
  userId              String                  @unique
  configurationStatus UserConfigurationStatus @default(INITIAL)
  locale              String                  @default("pt-BR")
  timezone            String                  @default("America/Sao_Paulo")
  emailVerifiedAt     DateTime?
  minCommission       Float?                  @default(0)
  maxCommission       Float?                  @default(5)
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Company {
  id                 String          @id @default(cuid())
  type               CompanyType
  document           String          @unique(map: "document")
  tradeName          String
  businessName       String
  loyaltyPoints      Int
  primaryColor       String?
  companyStatus      CompanyStatus   @default(UNDER_REVIEW)
  secondaryColor     String?
  stateRegistration  String?
  responsibleUuid    String?
  proposalCoverImage String?
  acceptedTermsAt    DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  companyContact     CompanyContact?
  users              User[]
  logs               Log[]

  @@index([document], type: Hash)
  @@map("companies")
}

model CompanyContact {
  id          String   @id @default(cuid())
  companyId   String   @unique
  email       String
  phone       String
  facebook    String?
  instagram   String?
  linkedin    String?
  youtube     String?
  twitter     String?
  genericLink String?
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId], type: Hash)
  @@map("company_contacts")
}

model Log {
  id          String    @id @default(cuid())
  description String?
  entity      LogEntity
  action      LogAction @default(GENERAL)
  body        String?   @db.Text
  ipAddress   String?
  userId      String?
  companyId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company?  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
  @@map("logs")
}

enum LogEntity {
  USER
  USER_PROFILE
  USER_SETTING
  COMPANY
  COMPANY_CONTACT
}

enum LogAction {
  GENERAL
  LOGIN
  REGISTER
  CREATE
  UPDATE
  DELETE
}

enum CompanyType {
  INTEGRATOR
  DISTRIBUTOR
}

enum CompanyStatus {
  UNDER_REVIEW
  DENIED
  ACCEPTED
}

enum MaritalStatus {
  SINGLE
  MARRIED
  SEPARATED
  DIVORCED
  WIDOWED
}

enum DocumentType {
  CNPJ
  CPF
}

enum Role {
  ADMIN
  CONSULTANT
  SELLER
  TECHNICIAN
  ENGINEER
  FINANCIAL
}

enum UserConfigurationStatus {
  INITIAL
  GENERAL_DATA
  EMPLOYEES
  EXPENSES
  PAYMENTS
  COMPLETED
}

enum GenericStatus {
  ACTIVE
  INACTIVE
}

enum UserStatus {
  CREATED
  INVITED
  ACTIVE
  BLOCKED
}
